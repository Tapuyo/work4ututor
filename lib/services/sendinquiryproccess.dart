import 'package:cloud_firestore/cloud_firestore.dart';

Future<String> sendInquiryToDatabase(
    String tutorID, studentID, message, subjectID, numberOFClasses) async {
  // Get a Firestore instance
  FirebaseFirestore firestore = FirebaseFirestore.instance;

  // Create a batch
  WriteBatch batch = firestore.batch();

  // Reference to the first collection
  CollectionReference collection1 = firestore.collection('messageparticipants');

  // Reference to the second collection
  CollectionReference collection2 = firestore.collection('messaging');

  try {
    // Data to be added to the first collection
    Map<String, dynamic> data1 = {
      'lastmessage': message ?? '',
      'messageDate': DateTime.now(),
      'messageStatus': {
          'studentRead': '0',
          'tutorRead': '0',
        },
      'studentFav': 'no',
      'studentID': studentID ?? '',
      'tutorFav': 'no',
      'tutorID': tutorID,
    };

    // Add data to the first collection
    DocumentReference docRefCollection1 = collection1.doc();
    batch.set(docRefCollection1, data1);

    // Commit the batch for the first collection
    await batch.commit();

    // Get the unique ID generated by Firestore for the document in collection1
    String generatedMessageID = docRefCollection1.id;

    // Data to be added to the second collection
    Map<String, dynamic> data2 = {
      'dateSent': DateTime.now(),
      'messageContent': message ?? '',
      'messageID': generatedMessageID,
      'noofclasses': numberOFClasses,
      'subjectID': subjectID,
      'classPrice': '',
      'type': 'inquiry',
      'userID': studentID,
      'status': 'unrespond',
    };

    // Add data to the second collection
    await collection2.add(data2);

    return 'success';
  } catch (e) {
    return e.toString();
  }
}

Future<String> sendInquiryToDatabasefoundcontact(String tutorID, studentID,
    message, subjectID, numberOFClasses, messageID) async {
  // Get a Firestore instance
  FirebaseFirestore firestore = FirebaseFirestore.instance;

  // Reference to the second collection
  CollectionReference collection2 = firestore.collection('messaging');

  try {
    // Data to be added to the second collection
    Map<String, dynamic> data2 = {
      'dateSent': DateTime.now(),
      'messageContent': message ?? '',
      'messageID': messageID,
      'noofclasses': numberOFClasses,
      'subjectID': subjectID,
      'classPrice': '',
      'type': 'inquiry',
      'userID': studentID,
    };

    // Add data to the second collection
    await collection2.add(data2);

    return 'success';
  } catch (e) {
    return e.toString();
  }
}

Future<String> sendOffer(String tutorID, classPrice, message, subjectID,
    numberOFClasses, messageID) async {
  // Get a Firestore instance
  FirebaseFirestore firestore = FirebaseFirestore.instance;

  // Reference to the second collection
  CollectionReference collection2 = firestore.collection('messaging');

  try {
    // Data to be added to the second collection
    Map<String, dynamic> data2 = {
      'dateSent': DateTime.now(),
      'messageContent': message ?? '',
      'messageID': messageID,
      'noofclasses': numberOFClasses,
      'subjectID': subjectID,
      'classPrice': classPrice,
      'type': 'offer',
      'userID': tutorID,
    };

    // Add data to the second collection
    await collection2.add(data2);

    return 'success';
  } catch (e) {
    return e.toString();
  }
}

Future<String> declineInquiry(String tutorID, classPrice, message, subjectID,
    numberOFClasses, messageID) async {
  // Get a Firestore instance
  FirebaseFirestore firestore = FirebaseFirestore.instance;

  // Reference to the second collection
  CollectionReference collection2 = firestore.collection('messaging');

  try {
    // Data to be added to the second collection
    Map<String, dynamic> data2 = {
      'dateSent': DateTime.now(),
      'messageContent': message ?? '',
      'messageID': messageID,
      'noofclasses': numberOFClasses,
      'subjectID': subjectID,
      'classPrice': '',
      'type': 'declinedinquiry',
      'userID': tutorID,
    };

    // Add data to the second collection
    await collection2.add(data2);

    return 'success';
  } catch (e) {
    return e.toString();
  }
}

Future<String> declineOffer(String tutorID, classPrice, message, subjectID,
    numberOFClasses, messageID, studentID) async {
  // Get a Firestore instance
  FirebaseFirestore firestore = FirebaseFirestore.instance;

  // Reference to the second collection
  CollectionReference collection2 = firestore.collection('messaging');

  try {
    // Data to be added to the second collection
    Map<String, dynamic> data2 = {
      'dateSent': DateTime.now(),
      'messageContent': message ?? '',
      'messageID': messageID,
      'noofclasses': numberOFClasses,
      'subjectID': subjectID,
      'classPrice': classPrice,
      'type': 'declinedoffer',
      'userID': studentID,
    };

    // Add data to the second collection
    await collection2.add(data2);

    return 'success';
  } catch (e) {
    return e.toString();
  }
}
